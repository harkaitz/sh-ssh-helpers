#!/bin/sh -e
##:
#h: Usage: ssh-h-services [-V] [SERVICE] [OPERATION]
##:
ssh_h_services() {
    local OPTIND optopt service operation machine daemon cfgfile logfile initd= ops=
    
    ## Parse command line options.
    while getopts "V" optopt; do
        case $optopt in
            V)  echo "SSH_H_SERVICES : ${SSH_H_SERVICES}"; return 0;;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))

    ## List all service status by default.
    if test ! -n "$1"; then
        ssh_h_services_status_all
        return 0
    fi
    
    ## Get machine the service is hosted on.
    service="$1"; shift
    read machine daemon cfgfile logfile <<-EOF
	$(ssh_h_services_cat | awk -v s="${service}" '$1 == s {print $2,$3,$4,$5; exit(0); }')
	EOF
    if test ! -n "${machine}"; then
        echo >&2 "error: ${service}: Not defined."
        return 1
    fi

    ## Empty daemon and log.
    if test @"${daemon:--}"  = @"-"; then daemon=;  fi
    if test @"${cfgfile:--}" = @"-"; then cfgfile=; fi
    if test @"${logfile:--}" = @"-"; then logfile=; fi

    ## Print help.
    if test ! -n "$1"; then
        if true; then
            echo "... machine            : Print machine name '${machine}'."
        fi
        if test -n "${daemon}"; then
            echo "... status             : View status of ${daemon}."
            echo "... enable,disable     : Configure service boot."
            echo "... restart,start,stop : Manage ${daemon} service."
        fi
        if test -n "${cfgfile}"; then
            echo "... edit               : Edit '${cfgfile}'."
        fi
        if test -n "${logfile}"; then
            echo "... 1000,tail          : View '${logfile}'."
        fi
        return 0
    fi
    
    
    ## Perform operations.
    while test -n "$1"; do
        operation="$1"
        case "${operation}" in
            machine)
                echo "${machine}"
                ;;
            status|enable|disable|restart|start|stop)
                if test ! -n "${daemon}"; then
                    echo >&2 "Warning: ${service}: ${operation} unsupported, skipping ..."
                    return 0
                fi
                initd="${initd:-$(ssh_h_get_initd "${machine}")}"
                test -n "${initd}"
                ssh_h_"${initd}"_"${operation}" "${machine}" "${daemon}"
                ;;
            edit)
                if test ! -n "${cfgfile}"; then
                    echo >&2 "error: ${service}: ${operation} unsupported."
                    return 1
                fi
                ssh -t "${machine}" "
                if which emacs >/dev/null 2>&1; then
                    sudo emacs -nw '${cfgfile}'
                else
                    sudo nano '${cfgfile}'
                fi
                "
                ;;
            1000|tail)
                if test ! -n "${logfile}"; then
                    echo >&2 "error: ${service}: ${operation} unsupported."
                    return 1
                fi
                case "${operation}" in
                    tail) ssh "${machine}" "sudo tail -f '${logfile}'";;
                    1000) ssh "${machine}" "sudo tail -n 1000 '${logfile}'";;
                esac
                ;;
            *)
                echo >&2 "error: Invalid argument: ${operation}"
                return 1
                ;;
        esac
        shift
    done
}
## -------------------------------------------------------------------
ssh_h_services_status_all() {
    ssh_h_services_cat | while read -r service machine ign; do
        echo "== ${service} (in ${machine})"
        ssh_h_services "${service}" status </dev/null || true
    done
}
ssh_h_get_initd() {
    ssh_h_run "$1" '
        if which sv >/dev/null 2>&1; then
            echo runit
        elif which systemctl >/dev/null 2>&1; then
            echo systemd
        else
            echo >&2 "error: Unsupported init system, only runit and systemd are known."
            exit 0
        fi
    '
}
## -------------------------------------------------------------------
ssh_h_runit_status()    { ssh_h_run "${1}" "sudo sv status  ${2}"; }
ssh_h_runit_restart()   { ssh_h_run "${1}" "sudo sv restart ${2}"; }
ssh_h_runit_start()     { ssh_h_run "${1}" "sudo sv start   ${2}"; }
ssh_h_runit_stop()      { ssh_h_run "${1}" "sudo sv down    ${2}"; }
ssh_h_runit_enable()    { ssh_h_run "${1}" "test -e /var/service/${2} || sudo ln -s /etc/sv/iberiar /var/service/${2}"; }
ssh_h_runit_disable()   { ssh_h_run "${1}" "sudo rm -f /var/service/${2}"; }
## -------------------------------------------------------------------
ssh_h_systemd_status()  { ssh_h_run "${1}" "sudo systemctl status  ${2} | sed 10q"; }
ssh_h_systemd_restart() { ssh_h_run "${1}" "sudo systemctl restart ${2}"; }
ssh_h_systemd_start()   { ssh_h_run "${1}" "sudo systemctl start   ${2}"; }
ssh_h_systemd_stop()    { ssh_h_run "${1}" "sudo systemctl stop    ${2}"; }
ssh_h_systemd_enable()  { ssh_h_run "${1}" "sudo systemctl enable  ${2}"; }
ssh_h_systemd_disable() { ssh_h_run "${1}" "sudo systemctl disable ${2}"; }
## -------------------------------------------------------------------
ssh_h_run() {
    local m="$1"
    shift
    case "${m}" in
        localhost|"$(uname -n)") sh -e -c "$*"           ;;
        *)                       ssh "${m}" "set -e; $*" ;;
    esac
}
ssh_h_services_cat() {
    if test -f "${SSH_H_SERVICES}"; then
        sed '/^\#/d' "${SSH_H_SERVICES}"
    fi
}
## -------------------------------------------------------------------
SSH_H_SERVICES="/h/etc/net/services"
if test @"$(basename "$0")" = @"ssh-h-services";then
    case "${1}" in
        -h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0" ;;
        *)         ssh_h_services "$@"; exit 0       ;;
    esac
fi
