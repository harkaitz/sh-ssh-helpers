#!/bin/sh -e
##:
#h: Usage: ssh-h-authorized-keys -f FILE SSH-HOSTS...
#h:
#h: Replace authorized_keys in remote machines.
##:
ssh_h_authorized_keys() {
    local OPTIND optopt ssh= file=
    ## Parse command line arguments.
    while getopts "f:" optopt; do
        case $optopt in
            f)  file="${OPTARG}";;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    ## Require a file.
    if test ! -e "${file}"; then
        echo >&2 "error: Please specify an authorized_keys file."
        return 1
    fi
    ## For each machine.
    for ssh in "$@"; do
        ssh "${ssh}" "$(sed -n '/[@]ASJDHG[@]/,/[@]ASJDHG[@]/p' "$0")" < "${file}"
    done
    
}
ssh_h_authorized_keys_remote() (
    ## @ASJDHG@
    mkdir -p ~/.ssh

    ## Read authorized keys.
    cat > ~/.ssh/authorized_keys.tmp
    if test @"$(wc -l < ~/.ssh/authorized_keys.tmp)" = @"0"; then
        echo >&2 "error: Empty authorized_keys."
        exit 1
    fi

    ## Update normal location.
    echo "Updating ~/.ssh/authorized_keys ..."
    mv ~/.ssh/authorized_keys.tmp ~/.ssh/authorized_keys

    ## Update windows location.
    if test -w C:/ProgramData/ssh; then
        echo "Updating C:/ProgramData/ssh/administrators_authorized_keys ..."
        cp ~/.ssh/authorized_keys C:/ProgramData/ssh/administrators_authorized_keys
    fi
    
    ## @ASJDHG@
)



if test @"$(basename "$0")" = @"ssh-h-authorized-keys";then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0"  ;;
        *)            ssh_h_authorized_keys "$@"; exit 0 ;;
    esac
fi
